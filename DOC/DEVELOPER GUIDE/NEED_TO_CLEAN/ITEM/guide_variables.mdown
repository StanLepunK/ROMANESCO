ROMANESC0 1.2.0.30
ITEM
ROMANESCO PROCESSING ENVIRONMENT 
--
VARIABLES
--


VAR GLOBAL
--
var can be set to give information to Controller
int RPE_name = "Surface" ;

int ID_item = 23 ;

int ID_group = 1 ; 

String RPE_author  = "Stan le Punk";

String RPE_version = "Version 1.0.2";

String RPE_pack = "Base" ;

String RPE_mode = "Surfimage/Vague/Vague++" ; 
>list name display in the dropdown menu controller, separate the differentes mode by "/"

String RPE_slider = "Fill hue,Fill sat,Fill bright,Fill alpha,Stroke hue,Stroke sat,Stroke bright,Stroke alpha,Thickness,Influence,Canvas X,Canvas Y,Quality,Canvas X,Speed X,Size X,Swing X" ;
>list of slider name display in the Controller, must be separate by comma ',' no space between the word.







BUTTON
––––––
int mode[ID_item] 
>if you have few modes active, this var return which mode is active. '0' is the first element of the list

boolean action[ID_item] 
>we use this one for the mouse move + vTouch in Romanesco application

boolean sound[ID_item] 
>authorize item to receive sound effect

boolean parameter[ID_item] 
>authorize item to receive data from Controller sliders






COORD ITEM 
--
Vec3 pos_item_final[ID_item]

Vec2 dir_item_final[ID_item]

COORD ITEM REF
--
Vec3 item_setting_position[0][ID_item] @ return original position

Vec2 item_setting_direction[0][ID_item] @ return original orientation




BOOLEAN
--
birth[ID_item] > from keyboard "N"

colour[ID_item] > from keyboard "X"

dimension[ID_item] > from keyboard "D"

horizon[ID_item] > from keyboard "H"

linked[ID_item] > from keyboard "L"

motion[ID_item] > from keyboard "M"

orbit[ID_item] > from keyboard "O"

reverse[ID_item] > from keyboard "R"

special[ID_item] > from keyboard "F"

wire[ID_item] > from keyboard "W"

fill_is[ID_item] > from keyboard "J"

stroke_is[ID_item] > from keyboard "K"















MASTER and FOLLOWER
--
boolean follower[ID_item] ;
>if it's true, the item became a follower and need an a master, after you must choice the ID of this master.

int master_ID[ID_item]  ;
>choice the ID  of the item master, the item follower will be following the camera move of the master




VARIABLE NAME
--
RPE_slider = "all" 

or choice in the list bellow, the case is very important, no "space" after or before the word. The word must be separate by a comma

"Fill hue,Fill sat,Fill bright,Fill alpha,
Stroke hue,Stroke sat,Stroke bright,Stroke alpha,
Thickness,
Size X,Size Y,Size Z,
Font size,
Canvas X,Canvas Y,Canvas Z,
Reactivity,
Speed X,Speed Y,Speed Z,
Spurt X,Spurt Y,Spurt Z,
Direction X,Direction Y,Direction Z,
Jitter X,Jitter Y,Jitter Z,
Swing X,Swing Y,Swing Z,
Quantity,Variety,
Life,Flow,Quality,
Area,Angle,Scope,Scan,
Alignment,Repulsion,Attraction,Charge – +,
Influence,Calm,Need"






ITEM SLIDER VALUE
--
>float value from slider controller, use with the 'ID' of your item

fill_item[ID_item] ;
>return int arg color

hue(fill_item[ID_item]) ;
>return float value: 0, 360.0

saturation(fill_item[ID_item]) ;
>return float value: 0, 100.0

brightness(fill_item[ID_item]) ;
>return float value: 0, 100.0

alpha(fill_item[ID_item]) ;
>return float value: 0, 100.0

stroke_item[ID_item] ;
>return int arg color

hue(stroke_item[ID_item]) ;
>return float value: 0, 360.0

saturation(stroke_item[ID_item]) ;
>return float: value 0, 100.0

brightness(stroke_item[ID_item]) ; 
>return float: value 0, 100.0

alpha(stroke_item[ID_item]) ; 
>return float value: 0,100.0

thickness_item[ID_item] ;
>return float value: 0.1, width x.01

size_x_item[ID_item] ; 
>return float value: width x.01, width

size_y_item[ID_item] ; 
>return float value: width x.01, width

size_z_item[ID_item]  ; 
>return float value: width x.01, width

diameter_item[ID_item] ; 
>return float value: width x.01, width

canvas_x_item[ID_item] ; 
>return float value: width x.1, (float)width x2PI

canvas_y_item[ID_item]  ; 
>return float value: width x.1, (float)width x2PI

canvas_z_item[ID_item] ; 
>return float value: width x.1, (float)width x2PI

reactivity_item[[ID_item] ; 
>return float: value 0, 1

speed_x_item[ID_item] ; 
>return float value: 0, 1

speed_y_item[ID_item] ; 
>return float value: 0, 1

speed_z_item[ID_item] ; @
>return float value: 0, 1

spurt_x_item[ID_item] ; 
>return float value: 0, 1

spurt_y_item[ID_item] ; 
>return float value: 0, 1

spurt_z_item[ID_item] ; 
>return float value: 0, 1

dir_x_item[ID_item] ; 
>return float value: 0, 360

dir_y_item[ID_item] ; 
>return float value: 0, 360

dir_z_item[ID_item] ; 
>return float value: 0, 360

jitter_x_item[ID_item] ; 
>return float value: 0, 1

jitter_y_item[ID_item] ; 
>return float value: 0, 1

jitter_z_item[ID_item] ; 
>return float value: 0, 1

swing_x_item[ID_item] ; 
>return float value: 0, 1

swing_y_item[ID_item] ; 
>return float value: 0, 1

swing_z_item[ID_item] ; 
>return float value: 0, 1

quantity_item[ID_item] ; 
>return float value:0, 1

variety_item[ID_item] ; 
>return float value: 0, 1

life_item[ID_item] ; 
>return float value: 0, 1

flow_item[ID_item] ; 
>return float value: 0, 1

quality_item[ID_item] ; 
>return float value: 0, 1

area_item[ID_item] ; 
>return float value: width x.1, width x2PI

angle_item[ID_item] ;
>return float value: 0, 360.0

scope_item[ID_item] ; 
>return loat value: width x.1, width x2PI

scan_item[ID_item] ; 
>return float value: 0, 360.0 

alignment_item[ID_item] ; 
>return float: value 0, 1

repulsion_item[ID_item] ; 
>return float: value 0, 1

attraction_item[ID_item] ; 
>return float: value 0, 1

density_item[ID_item] ; 
>return float: value 0, 1

influence_item[ID_item] ; 
>return float: value 0, 1

calm_item[ID_item] ; 
>return float: value 0, 1

spectrum_item[ID_item] ; 
>return float: value 0, 360



MIN MAX value of the slider in Vec2
--
Vec2 fill_hue_min_max ;
> 0,360

Vec2 fill_sat_min_max, fill_bright_min_max, fill_alpha_min_max ;
>0, color max of your environment

Vec2 stroke_hue_min_max ;
>0,360

Vec2 stroke_sat_min_max, stroke_bright_min_max, stroke_alpha_min_max ;
>0, color max of your environment

Vec2 thickness_min_max ;
>0.1, height x.33

Vec2 size_x_min_max, size_y_min_max, size_z_min_max ;
>width xmin_size, width

Vec2 font_size_min_max ; 
>eight x.005, height x.05

Vec2 canvas_x_min_max, canvas_y_min_max, canvas_z_min_max ;
>width xmin_size, width

Vec2 reactivity_min_max ;
>0,1

Vec2 speed_x_min_max, speed_y_min_max, speed_z_min_max ;
>0,1

Vec2 spurt_x_min_max,spurt_y_min_max, spurt_z_min_max ;
>0,1

Vec2 dir_x_min_max, dir_y_min_max, dir_z_min_max ;
>0,360

Vec2 jitter_x_min_max, jitter_y_min_max, jitter_z_min_max ;
>0,1

Vec2 swing_x_min_max, swing_y_min_max, swing_z_min_max ;
>0,1

Vec2 quantity_min_max ;
>0,1

Vec2 variety_min_max ;
>0,1

Vec2 life_min_max ;
>0,1

Vec2 flow_min_max ;
>0,1 

Vec2 quality_min_max ;
>0,1

Vec2 area_min_max ;
>width x min_size, width

Vec2 angle_min_max ;
>0,360

Vec2 scope_min_max ;
>width x min_size, width

Vec2 scan_min_max ;
>0,360

Vec2 alignment_min_max ;
>0,1 

Vec2 repulsion_min_max ;
>0,1 

Vec2 attraction_min_max ;
>0,1

Vec2 charge_min_max ;
>0,1

Vec2 influence_min_max ;
>0,1 

Vec2 calm_min_max ;
>0,1 

Vec2 need_min_max ;
>0,1



















